//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "workdocuments")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    #[serde(skip_serializing)]  // Skip id when serializing to JSON (--> FE never receives it)
    pub id: i32,
    #[sea_orm(unique)]
    pub internal_id: Uuid,
    #[sea_orm(unique)]
    pub serial_number: String,
    pub client_name: Option<String>,
    pub jobs_done: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub pesticides: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub responsible_person: Option<Json>,
    pub client_name_for_work_paper: Option<String>,
    pub scope_of_work: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub work_art: Option<Json>,
    pub work_end_date: Option<DateTimeWithTimeZone>,
    pub work_start_date: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub work_subject: Option<Json>,
    pub work_subject_other: Option<String>,
    pub company_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::companies::Entity",
        from = "Column::CompanyId",
        to = "super::companies::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Companies,
}

impl Related<super::companies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Companies.def()
    }
}
